import React, { useState } from "react";
import {
  ArrowLeft,
  Paperclip,
  Send,
  MoreVertical,
  Play,
  Pause,
  MessageSquare,
  Smile,
  Mic,
  UserPlus,
  X,
} from "lucide-react";
import { Button } from "@/components/ui/button";
export function App() {
  const [isPlaying, setIsPlaying] = useState(false);
  const [activeThread, setActiveThread] = useState(null);
  const MessageWithToolbar = ({
    children,
    sender,
    time,
    message,
    onThreadClick,
  }) => (
    <div className="flex items-start gap-3 group relative">
      <div className="w-10 h-10 rounded-full bg-[#2A2F3F] flex-shrink-0" />
      <div className="flex flex-col flex-1">
        <div className="flex items-center gap-2">
          <span className="font-medium text-white">{sender}</span>
          <span className="text-sm text-gray-400">{time}</span>
        </div>
        <div className="relative">
          {children}
          <div className="absolute right-0 top-0 -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-all duration-200 ease-in-out flex items-center gap-2 bg-[#2A2F3F] rounded-lg p-1 shadow-lg">
            <button
              className="p-1.5 hover:bg-[#1E2433] rounded-md text-gray-400 hover:text-white"
              onClick={() =>
                onThreadClick({
                  sender,
                  time,
                  content: message,
                })
              }
            >
              <MessageSquare size={16} />
            </button>
            <button className="p-1.5 hover:bg-[#1E2433] rounded-md text-gray-400 hover:text-white">
              <Smile size={16} />
            </button>
            <button className="p-1.5 hover:bg-[#1E2433] rounded-md text-gray-400 hover:text-white">
              <MoreVertical size={16} />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
  const ThreadPanel = ({ thread, onClose }) => (
    <div
      className={`fixed top-0 right-0 w-[400px] h-full bg-[#1a1f2e] border-l border-[#2A2F3F] transform transition-transform duration-300 ease-in-out ${thread ? "translate-x-0" : "translate-x-full"}`}
    >
      {thread && (
        <div className="flex flex-col h-full">
          <header className="flex items-center justify-between px-4 py-3 border-b border-[#2A2F3F]">
            <h2 className="text-white font-medium">Thread</h2>
            <button
              onClick={onClose}
              className="p-2 text-gray-400 hover:text-white rounded-lg hover:bg-[#2A2F3F]"
            >
              <X size={20} />
            </button>
          </header>
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            <div className="border-b border-[#2A2F3F] pb-4">
              <div className="flex items-start gap-3">
                <div className="w-10 h-10 rounded-full bg-[#2A2F3F]" />
                <div>
                  <div className="flex items-center gap-2">
                    <span className="font-medium text-white">
                      {thread.sender}
                    </span>
                    <span className="text-sm text-gray-400">{thread.time}</span>
                  </div>
                  <div className="mt-1 p-3 bg-[#1E2433] rounded-lg text-gray-300">
                    {thread.content}
                  </div>
                </div>
              </div>
            </div>
            <div className="text-sm text-gray-400 text-center py-4">
              No replies yet
            </div>
          </div>
          <div className="p-4 border-t border-[#2A2F3F]">
            <div className="flex items-center gap-2 bg-[#1E2433] rounded-lg p-2">
              <button className="p-2 text-gray-400 hover:text-white">
                <Paperclip size={20} />
              </button>
              <input
                type="text"
                placeholder="Reply in thread..."
                className="flex-1 bg-transparent border-none outline-none text-white placeholder-gray-400"
              />
              <Button className="bg-[#4477FF] hover:bg-[#3366EE] text-white rounded-lg p-2">
                <Send size={20} />
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
  return (
    <div className="flex flex-col w-full h-screen bg-[#1a1f2e]">
      <header className="flex items-center justify-between px-4 py-3 border-b border-[#2A2F3F]">
        <div className="flex items-center">
          <button className="p-2 text-gray-400 hover:text-white">
            <ArrowLeft size={20} />
          </button>
          <h1 className="ml-2 text-xl font-semibold text-white">
            Brock + Nathan Room
          </h1>
        </div>
        <button className="flex items-center gap-2 px-3 py-1.5 text-[#4477FF] hover:bg-[#2A2F3F] rounded-lg transition-colors">
          <UserPlus size={18} />
          <span className="text-sm font-medium">Invite</span>
        </button>
      </header>
      <main className="flex-1 overflow-y-auto p-4 space-y-6">
        <MessageWithToolbar
          sender="Brock Human"
          time="2:30 PM"
          message="Hey i've got an idea..."
          onThreadClick={setActiveThread}
        >
          <div className="mt-1 p-3 bg-[#1E2433] rounded-lg text-gray-300">
            Hey i've got an idea...
          </div>
        </MessageWithToolbar>
        <MessageWithToolbar
          sender="Me"
          time="2:32 PM"
          message="Tell me more..."
          onThreadClick={setActiveThread}
        >
          <div className="mt-1 p-3 bg-[#1E2433] rounded-lg text-gray-300">
            Tell me more...
          </div>
        </MessageWithToolbar>
        <MessageWithToolbar
          sender="Brock Human"
          time="2:35 PM"
          message="Yeah man, you're saying the same thing. Just baking in one master folder that does not include summaries or assumptions based on current thinking between groups that are prompting it. We always..."
          onThreadClick={setActiveThread}
        >
          <div className="mt-1 p-3 bg-[#1E2433] rounded-lg">
            <div className="flex items-center gap-3">
              <button
                className="w-8 h-8 flex items-center justify-center rounded-full bg-[#4477FF] hover:bg-[#3366EE] text-white"
                onClick={() => setIsPlaying(!isPlaying)}
              >
                {isPlaying ? <Pause size={16} /> : <Play size={16} />}
              </button>
              <div className="flex-1 h-1 bg-[#2A2F3F] rounded-full">
                <div className="w-1/3 h-full bg-[#4477FF] rounded-full" />
              </div>
              <span className="text-sm text-gray-400">0:39</span>
              <button className="text-gray-400 hover:text-white">
                <MoreVertical size={16} />
              </button>
            </div>
            <p className="mt-2 text-gray-300">
              Yeah man, you're saying the same thing. Just baking in one master
              folder that does not include summaries or assumptions based on
              current thinking between groups that are prompting it. We
              always...
            </p>
            <button className="mt-1 text-[#4477FF] text-sm hover:text-[#3366EE]">
              View transcript
            </button>
          </div>
        </MessageWithToolbar>
      </main>
      <div className="p-4 border-t border-[#2A2F3F]">
        <div className="flex items-center gap-2 bg-[#1E2433] rounded-lg p-2">
          <button className="p-2 text-gray-400 hover:text-white">
            <Paperclip size={20} />
          </button>
          <button className="p-2 text-gray-400 hover:text-white">
            <Mic size={20} />
          </button>
          <input
            type="text"
            placeholder="Send message"
            className="flex-1 bg-transparent border-none outline-none text-white placeholder-gray-400"
          />
          <Button className="bg-[#4477FF] hover:bg-[#3366EE] text-white rounded-lg p-2">
            <Send size={20} />
          </Button>
        </div>
      </div>
      <ThreadPanel
        thread={activeThread}
        onClose={() => setActiveThread(null)}
      />
    </div>
  );
}
